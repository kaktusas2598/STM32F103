/* For STM32F103x6 strictly */
#ifndef __I2C_H
#define __I2C_H

#ifdef __cplusplus
 extern "C" {
#endif

#define I2C_ENABLE(__HANDLE__)  ((__HANDLE__)->Instance->CR1 |=  I2C_CR1_PE)
#define I2C_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR1 &=  ~I2C_CR1_PE)

#define I2C_MIN_PCLK_FREQ(__PCLK__, __SPEED__)             (((__SPEED__) <= 100000U) ? ((__PCLK__) < I2C_MIN_PCLK_FREQ_STANDARD) : ((__PCLK__) < I2C_MIN_PCLK_FREQ_FAST))
#define I2C_CCR_CALCULATION(__PCLK__, __SPEED__, __COEFF__)     (((((__PCLK__) - 1U)/((__SPEED__) * (__COEFF__))) + 1U) & I2C_CCR_CCR)
#define I2C_FREQRANGE(__PCLK__)                            ((__PCLK__)/1000000U)
#define I2C_RISE_TIME(__FREQRANGE__, __SPEED__)            (((__SPEED__) <= 100000U) ? ((__FREQRANGE__) + 1U) : ((((__FREQRANGE__) * 300U) / 1000U) + 1U))
#define I2C_SPEED_STANDARD(__PCLK__, __SPEED__)            ((I2C_CCR_CALCULATION((__PCLK__), (__SPEED__), 2U) < 4U)? 4U:I2C_CCR_CALCULATION((__PCLK__), (__SPEED__), 2U))
#define I2C_SPEED_FAST(__PCLK__, __SPEED__, __DUTYCYCLE__) (((__DUTYCYCLE__) == I2C_DUTYCYCLE_2)? I2C_CCR_CALCULATION((__PCLK__), (__SPEED__), 3U) : (I2C_CCR_CALCULATION((__PCLK__), (__SPEED__), 25U) | I2C_DUTYCYCLE_16_9))
#define I2C_SPEED(__PCLK__, __SPEED__, __DUTYCYCLE__)      (((__SPEED__) <= 100000U)? (I2C_SPEED_STANDARD((__PCLK__), (__SPEED__))) : \
                                                                  ((I2C_SPEED_FAST((__PCLK__), (__SPEED__), (__DUTYCYCLE__)) & I2C_CCR_CCR) == 0U)? 1U : \
                                                                  ((I2C_SPEED_FAST((__PCLK__), (__SPEED__), (__DUTYCYCLE__))) | I2C_CCR_FS))

/* Inspired by HAL */
/**
 * @brief  I2C Configuration Structure definition
 */
typedef struct
{
	uint32_t ClockSpeed;       /*!< Specifies the clock frequency.
								 This parameter must be set to a value lower than 400kHz */

	uint32_t DutyCycle;        /*!< Specifies the I2C fast mode duty cycle.
								 This parameter can be a value of @ref I2C_duty_cycle_in_fast_mode */

	uint32_t OwnAddress1;      /*!< Specifies the first device own address.
								 This parameter can be a 7-bit or 10-bit address. */

	uint32_t AddressingMode;   /*!< Specifies if 7-bit or 10-bit addressing mode is selected.
								 This parameter can be a value of @ref I2C_addressing_mode */

	uint32_t DualAddressMode;  /*!< Specifies if dual addressing mode is selected.
								 This parameter can be a value of @ref I2C_dual_addressing_mode */

	uint32_t OwnAddress2;      /*!< Specifies the second device own address if dual addressing mode is selected
								 This parameter can be a 7-bit address. */

	uint32_t GeneralCallMode;  /*!< Specifies if general call mode is selected.
								 This parameter can be a value of @ref I2C_general_call_addressing_mode */

	uint32_t NoStretchMode;    /*!< Specifies if nostretch mode is selected.
								 This parameter can be a value of @ref I2C_nostretch_mode */

}I2C_InitTypeDef;

/**
  * @brief  I2C handle Structure definition
  */
typedef struct
{
  I2C_TypeDef                *Instance;      /*!< I2C registers base address               */

  I2C_InitTypeDef            Init;           /*!< I2C communication parameters             */

  uint8_t                    *pBuffPtr;      /*!< Pointer to I2C transfer buffer           */

  uint16_t                   XferSize;       /*!< I2C transfer size                        */

  uint16_t              XferCount;      /*!< I2C transfer counter                     */

  uint32_t              XferOptions;    /*!< I2C transfer options                     */

  uint32_t              PreviousState;  /*!< I2C communication Previous state and mode
                                                  context for internal usage               */

  //DMA_HandleTypeDef          *hdmatx;        [>!< I2C Tx DMA handle parameters             <]

  //DMA_HandleTypeDef          *hdmarx;        [>!< I2C Rx DMA handle parameters             <]

  //HAL_LockTypeDef            Lock;           [>!< I2C locking object                       <]

  //__IO HAL_I2C_StateTypeDef  State;          [>!< I2C communication state                  <]

  //__IO HAL_I2C_ModeTypeDef   Mode;           [>!< I2C communication mode                   <]

  uint32_t              ErrorCode;      /*!< I2C Error code                           */

  uint32_t              Devaddress;     /*!< I2C Target device address                */

  uint32_t              Memaddress;     /*!< I2C Target memory address                */

  uint32_t              MemaddSize;     /*!< I2C Target memory address  size          */

  uint32_t              EventCount;     /*!< I2C Event counter                        */

}I2C_HandleTypeDef;


//HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c);
void I2C_Init(I2C_HandleTypeDef *hi2c);

//HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
void I2C_Memory_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);

#endif
