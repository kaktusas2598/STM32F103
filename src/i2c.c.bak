#include "i2c.h"

/**
 * @brief  Initializes the I2C according to the specified parameters
 *         in the I2C_InitTypeDef and create the associated handle.
 * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
 *         the configuration information for I2C module
 * @retval HAL status
 */
void I2C_Init(I2C_HandleTypeDef *hi2c)
{
	uint32_t freqrange = 0U;
	uint32_t pclk1 = 0U;

	/* Check the I2C handle allocation */
	if(hi2c == NULL)
	{
		return;
		/*return HAL_ERROR;*/
	}

	/* Check the parameters */
	/*assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));*/
	/*assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));*/
	/*assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));*/
	/*assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));*/
	/*assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));*/
	/*assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));*/
	/*assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));*/
	/*assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));*/
	/*assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));*/

	/*if(hi2c->State == HAL_I2C_STATE_RESET)
	{
		/ Allocate lock resource and initialize it /
		hi2c->Lock = HAL_UNLOCKED;
		/ Init the low level hardware : GPIO, CLOCK, NVIC /
		HAL_I2C_MspInit(hi2c);
	}*/

	hi2c->State = HAL_I2C_STATE_BUSY;

	/* Disable the selected I2C peripheral */
	I2C_DISABLE(hi2c);

	/* Get PCLK1 frequency */
	pclk1 = RCC_GetPCLK1Freq();

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
	{
		return HAL_ERROR;
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	hi2c->Instance->CR2 = freqrange;

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

	/* Enable the selected I2C peripheral */
	I2C_ENABLE(hi2c);

	/*hi2c->ErrorCode = HAL_I2C_ERROR_NONE;*/
	/*hi2c->State = HAL_I2C_STATE_READY;*/
	/*hi2c->PreviousState = I2C_STATE_NONE;*/
	/*hi2c->Mode = HAL_I2C_MODE_NONE;*/

	return;
	/*return HAL_ OK;*/
}

